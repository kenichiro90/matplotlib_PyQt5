# -*- coding: utf-8 -*-

import pandas as pd
import sys
from PyQt5.QtWidgets import (QWidget, QFileDialog, QApplication)
from demoApp_Ui import Ui_Form


class DemoApp(QWidget):
    def __init__(self, parent=None):

        # ---------------------------------------------------------------------
        # ウィジェットの初期化
        # ---------------------------------------------------------------------
        super(DemoApp, self).__init__(parent)
        self.ui = Ui_Form()

        self.ui.setupUi(self)


    def location_on_the_screen(self, xPos, yPos):

        # ---------------------------------------------------------------------
        # 画面の左上へウィンドウを移動する
        # ---------------------------------------------------------------------
        self.move(xPos, yPos)


    def openFileDialog(self):

        # ---------------------------------------------------------------------
        # ファイル選択ダイアログの表示
        # ---------------------------------------------------------------------
        self.inputFd = QFileDialog()
        self.inputFp = self.inputFd.getOpenFileName(
                        self, u"ファイルを開く", "", u"CSVファイル(*.csv)")
        if self.inputFd:
            self.ui.fileLineEdit.setText(self.inputFp[0])
            self.initialize_canvas(self.inputFp[0])
        elif self.inputFd == "":
            pass


    def initialize_canvas(self, file):

        # ---------------------------------------------------------------------
        # CSVファイルを読み込む
        #   必ず、'x'列と'y'列を作成すること
        # ---------------------------------------------------------------------
        data = pd.read_csv(file)
        x = data['x']
        y = data['y']
        # ---------------------------------------------------------------------
        # 読み込んだデータを描画する
        # ---------------------------------------------------------------------
        self.ui.canvas.plt.plot(x,y)
        self.ui.canvas.fig.canvas.draw()


    def refreshCanvas(self):

        # ---------------------------------------------------------------------
        # LineEditから、値を読み込む
        # ---------------------------------------------------------------------
        ax_x_min = float(self.ui.xAxisMinLineEdit.text())
        ax_x_max = float(self.ui.xAxisMaxLineEdit.text())
        ax_y_min = float(self.ui.yAxisMinLineEdit.text())
        ax_y_max = float(self.ui.yAxisMaxLineEdit.text())
        # ---------------------------------------------------------------------
        # 軸の範囲を再設定する
        # ---------------------------------------------------------------------
        self.ui.canvas.plt.set_xlim(ax_x_min, ax_x_max)
        self.ui.canvas.plt.set_ylim(ax_y_min, ax_y_max)
        # ---------------------------------------------------------------------
        # 設定した内容で、描画し直す
        # ---------------------------------------------------------------------
        self.ui.canvas.fig.canvas.draw()



# -----------------------------------------------------------------------------
# これ以降は実行用コード
# -----------------------------------------------------------------------------
def main():

    # -------------------------------------------------------------------------
    # アプリケーションの初期化
    # -------------------------------------------------------------------------
    app = QApplication(sys.argv)
    # -------------------------------------------------------------------------
    # ウィンドウのスタイル定義
    #   "windows"       : Windowsクラシックスタイル
    #   "windowsvista"  : Vistaスタイル
    #   "fusion"        : Qtオリジナル
    #   "macintosh"     : Macスタイル
    # -------------------------------------------------------------------------
    app.setStyle("fusion")
    # -------------------------------------------------------------------------
    # ウィンドウの生成 & 初期位置への移動
    # -------------------------------------------------------------------------
    window = DemoApp()
    window.location_on_the_screen(100, 100)
    # -------------------------------------------------------------------------
    # ウィンドウの表示 & 終了時動作の宣言
    # -------------------------------------------------------------------------
    window.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
